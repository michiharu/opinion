<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>OPINIONS Blog</title>
        <link>https://michiharu.github.io/opinions/opinions/blog</link>
        <description>OPINIONS Blog</description>
        <lastBuildDate>Tue, 17 May 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[UNIX哲学に学ぶシンプル]]></title>
            <link>https://michiharu.github.io/opinions/opinions/blog/unix-philosophy</link>
            <guid>unix-philosophy</guid>
            <pubDate>Tue, 17 May 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[シンプルさについて語るときに僕の語ること、というテーマでいくつか記事を書きたいと思います。]]></description>
            <content:encoded><![CDATA[<p>シンプルさについて語るときに僕の語ること、というテーマでいくつか記事を書きたいと思います。</p><ul><li><a href="/opinions/blog/unix-philosophy/">UNIX哲学に学ぶシンプル</a></li><li>Less is More</li><li>状態 &gt; 結合 &gt; 複雑性 &gt; コード量</li><li>アプリケーションコードをシンプルに</li><li>N対Nより1対1</li><li>共通化の条件</li></ul><p>書き始める前に春樹さんの次の言葉を思い出しました。</p><blockquote><p>説明しなくてはそれがわからんというのは、つまり、どれだけ説明してもわからんということだ</p></blockquote><p>説明しても分からないかもしれないけど、
とにかく私の考えるシンプルについてちゃんとどこかに書いておきたいと思い立った次第です。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="unix哲学に学ぶシンプル">UNIX哲学に学ぶシンプル<a class="hash-link" href="#unix哲学に学ぶシンプル" title="Direct link to heading">​</a></h2><p>実際にWikiを読んでみることをお勧めしますが、
<a href="https://ja.wikipedia.org/wiki/UNIX%E5%93%B2%E5%AD%A6" target="_blank" rel="noopener noreferrer">UNIX哲学</a>には深くうなづけるたくさんの格言があります。</p><p>シンプルさこそが重要であるという考え方は、UNIXの哲学として浸透しています。
そのUNIX哲学でシンプルさを評価している言葉やシンプルさを実現するための方法論をここで紹介します。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="シンプルさについて触れている格言">シンプルさについて触れている格言<a class="hash-link" href="#シンプルさについて触れている格言" title="Direct link to heading">​</a></h3><p>Wikiには異なる人が同じ意味の言葉を挙げていますが、まとめることはせずにそのまま列挙しました。</p><ul><li>それぞれのプログラムが1つのことをうまくこなすように<ul><li>新しい仕事をするために、新しい「機能」を追加して古いプログラムを複雑にするのではなく、
新しいプログラムを構築する</li></ul></li><li>一つのことをうまくやるプログラムを書く</li><li>プログラムを書いたり、テストしたり、実行したりするのが簡単に行えるように</li><li>スマートなデータを使うつまらないコードを書け</li><li>小さいものは美しい</li><li>各プログラムが一つのことをうまくやるようにせよ</li><li>効率よりも移植しやすさを選べ</li><li>ソフトウェアを梃子(てこ)として利用せよ</li><li>拘束的なユーザーインターフェースは作るな</li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="より悪いことはより良いことだ-worse-is-better">より悪いことは、より良いことだ （Worse is better）<a class="hash-link" href="#より悪いことはより良いことだ-worse-is-better" title="Direct link to heading">​</a></h3><p>リチャード・P・ガブリエルは、UNIXの重要な優位性のひとつは彼が「より悪いことは、より良いことだ」（"Worse is better"）という用語に込める
デザイン哲学を体現しているところにあると述べている。</p><blockquote><p>「より悪いことは、より良いことだ」式のデザイン・スタイルでは、インターフェースと実装の両面がシンプルであることが、
システムにおける他のいかなる特性よりも重視される――正確さ、堅牢さ、完全さよりも、である。</p></blockquote><h3 class="anchor anchorWithStickyNavbar_mojV" id="レイモンド-unixプログラミングの技法">レイモンド: UNIXプログラミングの技法<a class="hash-link" href="#レイモンド-unixプログラミングの技法" title="Direct link to heading">​</a></h3><p>エリック・S・レイモンドは著書『The Art of UNIX Programming』<!-- -->[6]<!-- -->の中で、
UNIX哲学を "<strong>Keep it Simple, Stupid</strong>" （KISS原則、「シンプルでつまらないものに保て」）という、
広く使われている工学哲学として要約した。</p><p>そしてレイモンドは、彼がいかにこの総体的な哲学がUNIXの文化的規範として適用されていると信じているか述べている。</p><ul><li><strong>モジュール化のルール</strong> クリーンなインターフェースで接続されるシンプルなパーツを書け<ul><li>プログラムは、単純な部品同士を、しっかり目の定義を持つインターフェースでつなぎ合わせたものとして書かれるべきです。
そうすれば、問題は局所的なものとなり、プログラムの一部は将来のバージョンで新機能をサポートするために交換することができます。</li><li>このルールの狙いは、複雑で長くて読めないコードをデバッグする時間を節約することにあります。</li></ul></li><li><strong>明瞭さのルール</strong> 明瞭さは独創性よりも良い<ul><li>開発者が最も意志疎通を図るべき相手はコンピュータではなく、プログラムを読み、保守を行う自分を含めた開発者であるかのようにプログラムを書くべきです。</li><li>このルールは、将来そのコードを扱う人にとって、コードが読みやすく、理解しやすいものにすることを目的としています。</li></ul></li><li><strong>分割のルール</strong> ポリシーをメカニズムから分離せよ、インターフェースをエンジンから分離せよ<ul><li>開発者は、プログラムのメカニズムとプログラムのポリシーを分離する必要があります。
一つの方法として、プログラムをフロントエンドのインターフェースと、そのインターフェースが通信するバックエンドのエンジンに分ける等があります。</li><li>このルールは、メカニズムを崩さずにポリシーを変更できるようにし、結果的にバグの数を減らすことを目的としています。</li><li>分割ルールはUIライブラリーを使った開発において、テーマシステムによるコンポーネントとスタイルの分割にも同様に適用できます。</li></ul></li><li><strong>シンプルさのルール</strong> シンプルさを求めてデザインせよ<ul><li>シンプルさを求めてデザインせよ、複雑にしなければならない場合に限り、複雑さを加えよ。</li><li>開発者はシンプルなデザインを心掛けるべきです。プログラムを小さく分かりやすい協調性を持ったピースに分割する方法を模索してください。</li><li>このルールは、開発者が「緻密（ちみつ）で美しく複雑な」実際にはバグだらけのプログラムを書いてしまうことを防ぐためのものです。</li></ul></li><li><strong>倹約のルール</strong> 大きなプログラムを書くのは、他に何もできないことが実証された場合のみ<ul><li>開発者は大きなプログラムを書くことを避けるべきです。</li><li>失敗もしくは妥協的アプローチへの開発時間の過剰投資を防ぐことが、このルールの目的です。
これらは膨大な作業の数々を破棄したくないというプログラム所有者の気持ちが原因でおこります。
小さなプログラムは、最適化やメンテナンスが容易であるだけでなく、廃棄する際も削除が容易です。</li></ul></li><li><strong>透明性のルール</strong> 透明性を求めてデザインせよ 調査とデバッグが簡単になる<ul><li>開発者は、将来そのプロジェクトに参加する開発者が、自分の思考プロセスを明瞭に見ることができるように書き、
有効な入力と正しい出力を容易に識別できる入出力形式を使用することによって、可視性と発見性を設計する必要があります。</li><li>このルールにより、デバッグにかかる時間を短縮し、プログラムの寿命を延ばすことを目的としています。</li></ul></li><li><strong>頑丈さのルール</strong> 頑丈さは透明性とシンプルさから生まれる<ul><li>開発者は、透明性と発見力を高める設計をすることで、堅牢なプログラムを設計する必要があります。
なぜなら、理解しやすいコードは、複雑なプログラムでは予見できないような予期せぬ状況に対してストレステストを行いやすいからです。</li><li>このルールは、開発者が堅牢で信頼性の高い製品を構築できるようにすることを目的としています。</li></ul></li><li><strong>代表のルール</strong> 知識をデータに織り込め<ul><li>知識をデータに織り込め。するとプログラムのロジックをつまらなくて頑丈なものにできる。</li><li>開発者は、選択に迫られたとき、プログラムの手続き的なロジックよりも、データをより複雑にすることを選択すべきです。
なぜなら、人間にとって複雑なデータは、複雑なロジックに比べて理解しやすいからです。<ul><li>「データを複雑に」という表現は誤解を生むかもしれないので補足します。<br>
例えばユーザーの情報を、<code>{ "info": "1,36" }</code>というデータで表現しているとします。
1は男性（1は女性）、36が年齢を意味しているとしましょう。<code>{ info: string }</code>という構造はシンプルですね。<br>
しかし、その代わりに<code>{ "sex": "man", "age": 36 }</code>というより複雑なデータ構造を使うことにより、
そのデータを扱うプログラムをシンプルにすることが出来る、ということだと解釈してください。</li></ul></li><li>このルールは、プロジェクトに携わるどの開発者にとってもプログラムを読みやすくすることで、プログラムの保守を可能にすることを目的としています。</li></ul></li><li><strong>沈黙のルール</strong> 余計な出力をすべきではない 他の開発者にとってただ邪魔なだけである<ul><li>開発者は、不要な出力をしないようにプログラムを設計する必要があります。</li><li>このルールは、他のプログラムや開発者が、冗長な出力を解析することなく、プログラムの出力から必要な情報を選び出せるようにすることを目的としています。</li></ul></li><li><strong>修復のルール</strong> 失敗しなければならないときは、騒がしく、かつできるだけ早く失敗せよ<ul><li>開発者は、故障の原因が特定しやすく、診断しやすい、つまり「音を立てて故障する」プログラムを設計する必要があります。</li><li>このルールは、プログラムからの不正な出力が入力となり、他のコードの出力が検出されずに破損することを防ぐことを目的としています。</li></ul></li><li><strong>生成のルール</strong> hand-hackingは避けよ<ul><li>プログラムを書けるときに、プログラムを書くためにプログラムを書け。</li><li>開発者は手書きでコードを書くことを避け、代わりに抽象的な高水準プログラムを書いて、コードを生成する必要があります。</li><li>このルールは、ヒューマンエラーを減らし、時間を節約することを目的としています。</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="まとめ">まとめ<a class="hash-link" href="#まとめ" title="Direct link to heading">​</a></h2><p>UNIX哲学においてシンプルこそが最も重要だと考えられていますが、
シンプルに開発するためのたくさんのヒントがUNIX哲学には含まれています。</p><p>今日このブログを読んで１つだけ、お気に入りの格言を覚えてもらえたらと思います。</p>]]></content:encoded>
            <category>dev</category>
            <category>simple</category>
            <category>kiss</category>
        </item>
    </channel>
</rss>